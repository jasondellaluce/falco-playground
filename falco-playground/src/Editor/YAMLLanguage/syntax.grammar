@top Document { document }

@skip { space | newlineEmpty | Comment }

document { DocStart newline property* DocEnd }

property { Key value newline }

value { scalar | MultiLine | Mapping | Sequence }

scalar { Boolean | Null | Number | String }
String { plain | string }

MultiLine {
  (quote lineSkip newline multiline quote) |
  (FoldOp newline multiline)
}

@skip { newlineEmpty } {
  multiline { indent (lineSkip newline)+ dedent }
}

Mapping { "{" commaSep<scalar>? "}" }

Sequence { "[" commaSep<scalar>? "]" }

Boolean { @specialize<plain, "true" | "false" > }
Null { @specialize<plain, "null" | "~" > }

@context trackIndent from "./tokens.js"

@external tokens indentation from "./tokens" { indent, dedent }

@tokens {
  DocStart { "---" }
  DocEnd { "..." }
  colon { ": " }
  FoldOp { $[|>] $[+\-]? }

  Key { keyChar (std.digit | keyChar)* space? colon }
  keyChar { std.asciiLetter | "_" }

  Number { "-"? (int | int? frac) exp? }
  int { "0" | $[1-9] std.digit* }
  frac { "." (std.digit+ | "nan" | "inf") }
  exp { $[eE] $[+\-]? std.digit+ }

  string { quote line quote }
  plain { ![{}[\]&*#?|\-<>=!%@:" \t\f] line }
  lineSkip { (!["\n\r] | "\\" _)+ }
  line { (![#"\n\r] | "\\" _)+ }

  quote { '"' }
  Comment { "#" ![\n\r]* }
  space { ($[ \t\f] | "\\" $[\n\r])+ }

  "{" "}" "[" "]"

  @precedence { Number, plain }
  @precedence { lineSkip, space }
  @precedence { lineSkip, Comment }
}

commaSep<expr> { expr ("," expr)* }

@external tokens newlines from "./tokens" { newline, newlineEmpty }

@external propSource yamlHighlighting from "./highlight"

@detectDelim